#include <iostream>
#include <string>
#include <vector>
#include <limits>
#include "library.h"

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
void clearScreen() {
#ifdef _WIN32
    system("cls");
#else
    system("clear");
#endif
}

// ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å
void showMainMenu() {
    std::cout << "\n===================================\n";
    std::cout << "üìö ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏°‡∏∏‡∏î (Library Management System)\n";
    std::cout << "===================================\n";
    std::cout << "1. ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠ (Book Management)\n";
    std::cout << "2. ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å (Member Management)\n";
    std::cout << "3. ‡∏£‡∏∞‡∏ö‡∏ö‡∏¢‡∏∑‡∏°-‡∏Ñ‡∏∑‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠ (Borrow & Return)\n";
    std::cout << "4. ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö (Exit)\n";
    std::cout << "===================================\n";
    std::cout << "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (1-4): ";
}

// ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠
void showBookMenu() {
    clearScreen();
    std::cout << "\n===================================\n";
    std::cout << "üìö ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠ (Book Management)\n";
    std::cout << "===================================\n";
    std::cout << "1. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡πÉ‡∏´‡∏°‡πà (Add New Book)\n";
    std::cout << "2. ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠ (Edit Book)\n";
    std::cout << "3. ‡∏•‡∏ö‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠ (Delete Book)\n";
    std::cout << "4. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠ (Search Book)\n";
    std::cout << "5. ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (Show All Books)\n";
    std::cout << "6. ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å (Back to Main Menu)\n";
    std::cout << "===================================\n";
    std::cout << "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (1-6): ";
}

// ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
void showMemberMenu() {
    clearScreen();
    std::cout << "\n===================================\n";
    std::cout << "üë§ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å (Member Management)\n";
    std::cout << "===================================\n";
    std::cout << "1. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏´‡∏°‡πà (Add New Member)\n";
    std::cout << "2. ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å (Edit Member)\n";
    std::cout << "3. ‡∏•‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å (Delete Member)\n";
    std::cout << "4. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å (Search Member)\n";
    std::cout << "5. ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (Show All Members)\n";
    std::cout << "6. ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å (Back to Main Menu)\n";
    std::cout << "===================================\n";
    std::cout << "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (1-6): ";
}

// ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠
void showBookSearchMenu() {
    clearScreen();
    std::cout << "\n===================================\n";
    std::cout << "üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠ (Search Books)\n";
    std::cout << "===================================\n";
    std::cout << "1. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏´‡∏±‡∏™ (By ID)\n";
    std::cout << "2. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠ (By Title)\n";
    std::cout << "3. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢ ISBN (By ISBN)\n";
    std::cout << "4. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà (By Category)\n";
    std::cout << "5. ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠ (Back to Book Menu)\n";
    std::cout << "===================================\n";
    std::cout << "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (1-5): ";
}

// ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
void showMemberSearchMenu() {
    clearScreen();
    std::cout << "\n===================================\n";
    std::cout << "üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å (Search Members)\n";
    std::cout << "===================================\n";
    std::cout << "1. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏´‡∏±‡∏™‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å (By ID)\n";
    std::cout << "2. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏ä‡∏∑‡πà‡∏≠ (By Name)\n";
    std::cout << "3. ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å (Back to Member Menu)\n";
    std::cout << "===================================\n";
    std::cout << "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (1-3): ";
}

// ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏¢‡∏∑‡∏°-‡∏Ñ‡∏∑‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠
void showBorrowReturnMenu() {
    clearScreen();
    std::cout << "\n===================================\n";
    std::cout << "üìñ ‡∏£‡∏∞‡∏ö‡∏ö‡∏¢‡∏∑‡∏°-‡∏Ñ‡∏∑‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠ (Borrow & Return)\n";
    std::cout << "===================================\n";
    std::cout << "1. ‡∏¢‡∏∑‡∏°‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠ (Borrow Book)\n";
    std::cout << "2. ‡∏Ñ‡∏∑‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠ (Return Book)\n";
    std::cout << "3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏¢‡∏∑‡∏° (Check Member Borrowing)\n";
    std::cout << "4. ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å (Back to Main Menu)\n";
    std::cout << "===================================\n";
    std::cout << "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (1-4): ";
}

// ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏î‡πÜ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠
void waitForKeyPress() {
    std::cout << "\n‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏î‡πÜ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠...";
    std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
    std::cin.get();
}

// ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠
void displayBooks(const std::vector<Book*>& books) {
    if (books.empty()) {
        std::cout << "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠\n";
        return;
    }
    
    std::cout << "\n=== ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠ ===\n";
    std::cout << "‡∏£‡∏´‡∏±‡∏™\t‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠\t‡∏ú‡∏π‡πâ‡πÅ‡∏ï‡πà‡∏á\tISBN\t‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà\t‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞\n";
    std::cout << "-------------------------------------------------------------\n";
    
    for (Book* book : books) {
        std::cout << book->getId() << "\t" 
                  << book->getTitle() << "\t" 
                  << book->getAuthor() << "\t" 
                  << book->getIsbn() << "\t" 
                  << book->getCategory() << "\t" 
                  << (book->getAvailability() ? "‡∏ß‡πà‡∏≤‡∏á" : "‡∏ñ‡∏π‡∏Å‡∏¢‡∏∑‡∏°") << "\n";
    }
    std::cout << "-------------------------------------------------------------\n";
}

// ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
void displayMembers(const std::vector<Member*>& members) {
    if (members.empty()) {
        std::cout << "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å\n";
        return;
    }
    
    std::cout << "\n=== ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å ===\n";
    std::cout << "‡∏£‡∏´‡∏±‡∏™\t‡∏ä‡∏∑‡πà‡∏≠\t‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠\t‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡∏°\n";
    std::cout << "-------------------------------------------------------------\n";
    
    for (Member* member : members) {
        std::cout << member->getId() << "\t" 
                  << member->getName() << "\t" 
                  << member->getContactInfo() << "\t" 
                  << member->borrowedCount() << "\n";
    }
    std::cout << "-------------------------------------------------------------\n";
}

// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠
void handleBookMenu(Library& library) {
    int choice = 0;
    
    do {
        showBookMenu();
        std::cin >> choice;
        std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
        
        switch (choice) {
            case 1: { // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡πÉ‡∏´‡∏°‡πà
                clearScreen();
                std::cout << "\n=== ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡πÉ‡∏´‡∏°‡πà ===\n";
                
                std::string title, author, isbn, category;
                
                std::cout << "‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠: ";
                std::getline(std::cin, title);
                
                std::cout << "‡∏ú‡∏π‡πâ‡πÅ‡∏ï‡πà‡∏á: ";
                std::getline(std::cin, author);
                
                std::cout << "ISBN: ";
                std::getline(std::cin, isbn);
                
                std::cout << "‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà: ";
                std::getline(std::cin, category);
                
                std::string bookId = library.addBook(title, author, isbn, category);
                
                std::cout << "\n‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏£‡∏´‡∏±‡∏™‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏Ñ‡∏∑‡∏≠: " << bookId << std::endl;
                waitForKeyPress();
                break;
            }
            case 2: { // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠
                clearScreen();
                std::cout << "\n=== ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠ ===\n";
                
                std::string id;
                std::cout << "‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ";
                std::getline(std::cin, id);
                
                Book* book = library.findBookById(id);
                if (book == nullptr) {
                    std::cout << "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏£‡∏´‡∏±‡∏™: " << id << std::endl;
                    waitForKeyPress();
                    break;
                }
                
                std::cout << "\n‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:\n";
                book->display();
                
                std::string title, author, isbn, category;
                
                std::cout << "\n‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡πÉ‡∏´‡∏°‡πà (‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á): ";
                std::getline(std::cin, title);
                if (title.empty()) title = book->getTitle();
                
                std::cout << "‡∏ú‡∏π‡πâ‡πÅ‡∏ï‡πà‡∏á‡πÉ‡∏´‡∏°‡πà (‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á): ";
                std::getline(std::cin, author);
                if (author.empty()) author = book->getAuthor();
                
                std::cout << "ISBN ‡πÉ‡∏´‡∏°‡πà (‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á): ";
                std::getline(std::cin, isbn);
                if (isbn.empty()) isbn = book->getIsbn();
                
                std::cout << "‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÉ‡∏´‡∏°‡πà (‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á): ";
                std::getline(std::cin, category);
                if (category.empty()) category = book->getCategory();
                
                if (library.updateBook(id, title, author, isbn, category)) {
                    std::cout << "\n‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n";
                } else {
                    std::cout << "\n‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡πÑ‡∏î‡πâ\n";
                }
                
                waitForKeyPress();
                break;
            }
            case 3: { // ‡∏•‡∏ö‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠
                clearScreen();
                std::cout << "\n=== ‡∏•‡∏ö‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠ ===\n";
                
                std::string id;
                std::cout << "‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö: ";
                std::getline(std::cin, id);
                
                Book* book = library.findBookById(id);
                if (book == nullptr) {
                    std::cout << "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏£‡∏´‡∏±‡∏™: " << id << std::endl;
                    waitForKeyPress();
                    break;
                }
                
                std::cout << "\n‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö:\n";
                book->display();
                
                char confirm;
                std::cout << "\n‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà? (y/n): ";
                std::cin >> confirm;
                std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
                
                if (confirm == 'y' || confirm == 'Y') {
                    if (library.removeBook(id)) {
                        std::cout << "\n‡∏•‡∏ö‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n";
                    } else {
                        std::cout << "\n‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡πÑ‡∏î‡πâ\n";
                    }
                } else {
                    std::cout << "\n‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠\n";
                }
                
                waitForKeyPress();
                break;
            }
            case 4: { // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠
                int searchChoice = 0;
                
                do {
                    showBookSearchMenu();
                    std::cin >> searchChoice;
                    std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
                    
                    switch (searchChoice) {
                        case 1: { // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏´‡∏±‡∏™
                            clearScreen();
                            std::cout << "\n=== ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏´‡∏±‡∏™ ===\n";
                            
                            std::string id;
                            std::cout << "‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠: ";
                            std::getline(std::cin, id);
                            
                            Book* book = library.findBookById(id);
                            if (book != nullptr) {
                                std::cout << "\n‡∏û‡∏ö‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠:\n";
                                book->display();
                            } else {
                                std::cout << "\n‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏£‡∏´‡∏±‡∏™: " << id << std::endl;
                            }
                            
                            waitForKeyPress();
                            break;
                        }
                        case 2: { // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠
                            clearScreen();
                            std::cout << "\n=== ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏î‡πâ‡∏ß‡∏¢‡∏ä‡∏∑‡πà‡∏≠ ===\n";
                            
                            std::string title;
                            std::cout << "‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠ (‡∏´‡∏£‡∏∑‡∏≠‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô): ";
                            std::getline(std::cin, title);
                            
                            std::vector<Book*> foundBooks = library.findBooksByTitle(title);
                            displayBooks(foundBooks);
                            
                            waitForKeyPress();
                            break;
                        }
                        case 3: { // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢ ISBN
                            clearScreen();
                            std::cout << "\n=== ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏î‡πâ‡∏ß‡∏¢ ISBN ===\n";
                            
                            std::string isbn;
                            std::cout << "‡∏Å‡∏£‡∏≠‡∏Å ISBN (‡∏´‡∏£‡∏∑‡∏≠‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô): ";
                            std::getline(std::cin, isbn);
                            
                            std::vector<Book*> foundBooks = library.findBooksByISBN(isbn);
                            displayBooks(foundBooks);
                            
                            waitForKeyPress();
                            break;
                        }
                        case 4: { // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
                            clearScreen();
                            std::cout << "\n=== ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏î‡πâ‡∏ß‡∏¢‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà ===\n";
                            
                            std::string category;
                            std::cout << "‡∏Å‡∏£‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà (‡∏´‡∏£‡∏∑‡∏≠‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô): ";
                            std::getline(std::cin, category);
                            
                            std::vector<Book*> foundBooks = library.findBooksByCategory(category);
                            displayBooks(foundBooks);
                            
                            waitForKeyPress();
                            break;
                        }
                    }
                    
                } while (searchChoice != 5);
                
                break;
            }
            case 5: { // ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                clearScreen();
                std::cout << "\n=== ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ===\n";
                
                std::vector<Book*> allBooks = library.getAllBooks();
                displayBooks(allBooks);
                
                waitForKeyPress();
                break;
            }
        }
        
    } while (choice != 6);
}

// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏ô‡∏π‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
void handleMemberMenu(Library& library) {
    int choice = 0;
    
    do {
        showMemberMenu();
        std::cin >> choice;
        std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
        
        switch (choice) {
            case 1: { // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏´‡∏°‡πà
                clearScreen();
                std::cout << "\n=== ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏´‡∏°‡πà ===\n";
                
                std::string name, contactInfo;
                
                std::cout << "‡∏ä‡∏∑‡πà‡∏≠: ";
                std::getline(std::cin, name);
                
                std::cout << "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠: ";
                std::getline(std::cin, contactInfo);
                
                std::string memberId = library.addMember(name, contactInfo);
                
                std::cout << "\n‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏£‡∏´‡∏±‡∏™‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Ñ‡∏∑‡∏≠: " << memberId << std::endl;
                waitForKeyPress();
                break;
            }
            case 2: { // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
                clearScreen();
                std::cout << "\n=== ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å ===\n";
                
                std::string id;
                std::cout << "‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ";
                std::getline(std::cin, id);
                
                Member* member = library.findMemberById(id);
                if (member == nullptr) {
                    std::cout << "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏£‡∏´‡∏±‡∏™: " << id << std::endl;
                    waitForKeyPress();
                    break;
                }
                
                std::cout << "\n‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:\n";
                member->display();
                
                std::string name, contactInfo;
                
                std::cout << "\n‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà (‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á): ";
                std::getline(std::cin, name);
                if (name.empty()) name = member->getName();
                
                std::cout << "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà (‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á): ";
                std::getline(std::cin, contactInfo);
                if (contactInfo.empty()) contactInfo = member->getContactInfo();
                
                if (library.updateMember(id, name, contactInfo)) {
                    std::cout << "\n‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n";
                } else {
                    std::cout << "\n‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÑ‡∏î‡πâ\n";
                }
                
                waitForKeyPress();
                break;
            }
            case 3: { // ‡∏•‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
                clearScreen();
                std::cout << "\n=== ‡∏•‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å ===\n";
                
                std::string id;
                std::cout << "‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö: ";
                std::getline(std::cin, id);
                
                Member* member = library.findMemberById(id);
                if (member == nullptr) {
                    std::cout << "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏£‡∏´‡∏±‡∏™: " << id << std::endl;
                    waitForKeyPress();
                    break;
                }
                
                std::cout << "\n‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö:\n";
                member->display();
                
                char confirm;
                std::cout << "\n‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà? (y/n): ";
                std::cin >> confirm;
                std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
                
                if (confirm == 'y' || confirm == 'Y') {
                    if (library.removeMember(id)) {
                        std::cout << "\n‡∏•‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n";
                    } else {
                        std::cout << "\n‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÑ‡∏î‡πâ\n";
                    }
                } else {
                    std::cout << "\n‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å\n";
                }
                
                waitForKeyPress();
                break;
            }
            case 4: { // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
                int searchChoice = 0;
                
                do {
                    showMemberSearchMenu();
                    std::cin >> searchChoice;
                    std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
                    
                    switch (searchChoice) {
                        case 1: { // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏´‡∏±‡∏™‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
                            clearScreen();
                            std::cout << "\n=== ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏´‡∏±‡∏™ ===\n";
                            
                            std::string id;
                            std::cout << "‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å: ";
                            std::getline(std::cin, id);
                            
                            Member* member = library.findMemberById(id);
                            if (member != nullptr) {
                                std::cout << "\n‡∏û‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å:\n";
                                member->display();
                            } else {
                                std::cout << "\n‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏£‡∏´‡∏±‡∏™: " << id << std::endl;
                            }
                            
                            waitForKeyPress();
                            break;
                        }
                        case 2: { // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏ä‡∏∑‡πà‡∏≠
                            clearScreen();
                            std::cout << "\n=== ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏î‡πâ‡∏ß‡∏¢‡∏ä‡∏∑‡πà‡∏≠ ===\n";
                            
                            std::string name;
                            std::cout << "‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å (‡∏´‡∏£‡∏∑‡∏≠‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô): ";
                            std::getline(std::cin, name);
                            
                            std::vector<Member*> foundMembers = library.findMembersByName(name);
                            displayMembers(foundMembers);
                            
                            waitForKeyPress();
                            break;
                        }
                    }
                    
                } while (searchChoice != 3);
                
                break;
            }
            case 5: { // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                clearScreen();
                std::cout << "\n=== ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ===\n";
                
                std::vector<Member*> allMembers = library.getAllMembers();
                displayMembers(allMembers);
                
                waitForKeyPress();
                break;
            }
        }
        
    } while (choice != 6);
}

// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏ô‡∏π‡∏¢‡∏∑‡∏°-‡∏Ñ‡∏∑‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠
void handleBorrowReturnMenu(Library& library) {
    int choice = 0;
    
    do {
        showBorrowReturnMenu();
        std::cin >> choice;
        std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
        
        switch (choice) {
            case 1: { // ‡∏¢‡∏∑‡∏°‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠
                clearScreen();
                std::cout << "\n=== ‡∏¢‡∏∑‡∏°‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠ ===\n";
                
                std::string memberId, bookId;
                
                std::cout << "‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å: ";
                std::getline(std::cin, memberId);
                
                Member* member = library.findMemberById(memberId);
                if (member == nullptr) {
                    std::cout << "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏£‡∏´‡∏±‡∏™: " << memberId << std::endl;
                    waitForKeyPress();
                    break;
                }
                
                std::cout << "‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°: ";
                std::getline(std::cin, bookId);
                
                Book* book = library.findBookById(bookId);
                if (book == nullptr) {
                    std::cout << "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏£‡∏´‡∏±‡∏™: " << bookId << std::endl;
                    waitForKeyPress();
                    break;
                }
                
                if (!book->getAvailability()) {
                    std::cout << "‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡πÄ‡∏•‡πà‡∏°‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏¢‡∏∑‡∏°‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏∑‡∏°‡πÑ‡∏î‡πâ\n";
                    waitForKeyPress();
                    break;
                }
                
                if (library.borrowBook(memberId, bookId)) {
                    std::cout << "\n‡∏¢‡∏∑‡∏°‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n";
                    std::cout << "‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠: " << book->getTitle() << "\n";
                    std::cout << "‡∏ú‡∏π‡πâ‡∏¢‡∏∑‡∏°: " << member->getName() << "\n";
                    std::cout << "‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏∑‡∏ô: 14 ‡∏ß‡∏±‡∏ô‡∏ô‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ\n"; // ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏Å‡∏≥‡∏´‡∏ô‡∏î 14 ‡∏ß‡∏±‡∏ô
                } else {
                    std::cout << "\n‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏∑‡∏°‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡πÑ‡∏î‡πâ\n";
                }
                
                waitForKeyPress();
                break;
            }
            case 2: { // ‡∏Ñ‡∏∑‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠
                clearScreen();
                std::cout << "\n=== ‡∏Ñ‡∏∑‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠ ===\n";
                
                std::string memberId, bookId;
                
                std::cout << "‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å: ";
                std::getline(std::cin, memberId);
                
                Member* member = library.findMemberById(memberId);
                if (member == nullptr) {
                    std::cout << "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏£‡∏´‡∏±‡∏™: " << memberId << std::endl;
                    waitForKeyPress();
                    break;
                }
                
                std::cout << "‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô: ";
                std::getline(std::cin, bookId);
                
                Book* book = library.findBookById(bookId);
                if (book == nullptr) {
                    std::cout << "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏£‡∏´‡∏±‡∏™: " << bookId << std::endl;
                    waitForKeyPress();
                    break;
                }
                
                if (!member->hasBorrowed(bookId)) {
                    std::cout << "‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏¢‡∏∑‡∏°‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡πÄ‡∏•‡πà‡∏°‡∏ô‡∏µ‡πâ\n";
                    waitForKeyPress();
                    break;
                }
                
                if (library.returnBook(memberId, bookId)) {
                    std::cout << "\n‡∏Ñ‡∏∑‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n";
                    std::cout << "‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠: " << book->getTitle() << "\n";
                    std::cout << "‡∏ú‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô: " << member->getName() << "\n";
                } else {
                    std::cout << "\n‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏∑‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡πÑ‡∏î‡πâ\n";
                }
                
                waitForKeyPress();
                break;
            }
            case 3: { // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏¢‡∏∑‡∏°
                clearScreen();
                std::cout << "\n=== ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏¢‡∏∑‡∏° ===\n";
                
                std::string memberId;
                std::cout << "‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å: ";
                std::getline(std::cin, memberId);
                
                Member* member = library.findMemberById(memberId);
                if (member == nullptr) {
                    std::cout << "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏£‡∏´‡∏±‡∏™: " << memberId << std::endl;
                    waitForKeyPress();
                    break;
                }
                
                std::cout << "\n‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å:\n";
                member->display();
                
                std::vector<std::pair<Book*, std::string>> borrowedBooks = library.getBorrowedBooks(memberId);
                
                if (borrowedBooks.empty()) {
                    std::cout << "\n‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏¢‡∏∑‡∏°‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡πÄ‡∏•‡πà‡∏°‡πÉ‡∏î\n";
                } else {
                    std::cout << "\n=== ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡∏° ===\n";
                    std::cout << "‡∏£‡∏´‡∏±‡∏™\t‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠\t‡∏ú‡∏π‡πâ‡πÅ‡∏ï‡πà‡∏á\tISBN\t‡∏ß‡∏±‡∏ô‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î\n";
                    std::cout << "-------------------------------------------------------------\n";
                    
                    for (auto& pair : borrowedBooks) {
                        Book* book = pair.first;
                        std::string dueDate = pair.second;
                        
                        std::cout << book->getId() << "\t" 
                                  << book->getTitle() << "\t" 
                                  << book->getAuthor() << "\t" 
                                  << book->getIsbn() << "\t" 
                                  << dueDate << "\n";
                    }
                    std::cout << "-------------------------------------------------------------\n";
                }
                
                waitForKeyPress();
                break;
            }
        }
        
    } while (choice != 4);
}

int main() {
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡∏ö‡πÄ‡∏à‡∏Å‡∏ï‡πå Library
    Library library;
    
    int choice = 0;
    
    do {
        clearScreen();
        showMainMenu();
        std::cin >> choice;
        std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
        
        switch (choice) {
            case 1:
                handleBookMenu(library);
                break;
            case 2:
                handleMemberMenu(library);
                break;
            case 3:
                handleBorrowReturnMenu(library);
                break;
            case 4:
                std::cout << "\n‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏°‡∏∏‡∏î! ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...\n";
                library.saveData();
                break;
            default:
                std::cout << "‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (1-4)\n";
                waitForKeyPress();
                break;
        }
        
    } while (choice != 4);
    
    return 0;
}
